{"version":3,"sources":["component/timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","timer","setTimeout","state","etat","s","setState","m","h","reset","react_default","a","createElement","className","id","onClick","Component","App","component_timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAwFeA,qBArFX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,MAAO,WACPC,WAAW,WACY,SAAlBR,EAAKS,MAAMC,OACI,KAAfV,EAAKS,MAAME,EACZX,EAAKY,SAAS,CACZD,EAAE,EACFE,EAAEb,EAAKS,MAAMI,EAAE,IAGjBb,EAAKY,SAAS,CACZD,EAAEX,EAAKS,MAAME,EAAE,IAGF,KAAfX,EAAKS,MAAMI,GACbb,EAAKY,SAAS,CACZC,EAAE,EACFC,EAAEd,EAAKS,MAAMK,EAAE,IAGnBd,EAAKO,UACH,MA7BcP,EAgCfe,MAAO,WACRf,EAAKY,SACL,CAEEE,EAAG,EACHD,EAAE,EACFF,EAAE,EACFD,KAAK,WAvCSV,EA2ChBU,KAAK,WACkB,SAAlBV,EAAKS,MAAMC,KACZV,EAAKY,SAAS,CACZF,KAAK,WAIPV,EAAKY,SAAS,CACZF,KAAK,SAEPV,EAAKO,UAnDPP,EAAKS,MAAM,CACPK,EAAG,EACHD,EAAE,EACFF,EAAE,EACFD,KAAK,SANKV,wEA2DZ,OACEgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACfH,EAAAC,EAAAC,cAAA,YAAOf,KAAKM,MAAMK,EAAE,GAAG,IAAIX,KAAKM,MAAMK,EAAEX,KAAKM,MAAMK,GADnD,IAEAE,EAAAC,EAAAC,cAAA,YAAOf,KAAKM,MAAMI,EAAE,GAAG,IAAIV,KAAKM,MAAMI,EAAEV,KAAKM,MAAMI,GAFnD,IAGAG,EAAAC,EAAAC,cAAA,YAAOf,KAAKM,MAAME,EAAE,GAAG,IAAIR,KAAKM,MAAME,EAAER,KAAKM,MAAME,IAEpDK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SAAR,IAAiBJ,EAAAC,EAAAC,cAAA,QAAME,GAAG,SAAQJ,EAAAC,EAAAC,cAAA,sBAAjB,MACjBF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SAAQJ,EAAAC,EAAAC,cAAA,QAAME,GAAG,SAAQJ,EAAAC,EAAAC,cAAA,wBAAjB,MAChBF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SAAQJ,EAAAC,EAAAC,cAAA,QAAME,GAAG,SAAQJ,EAAAC,EAAAC,cAAA,wBAAjB,OAEpBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAOE,QAASlB,KAAKO,MAAyB,SAAlBP,KAAKM,MAAMC,KAAc,OAAO,SAC9EM,EAAAC,EAAAC,cAAA,UAAQC,UAAU,OAAOE,QAASlB,KAAKY,OAAvC,qBA7EKO,cCSLC,0LANX,OACIP,EAAAC,EAAAC,cAACM,EAAD,aAHUF,cCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bf2a3655.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './timer.css';\r\nclass Timer extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            h: 0,\r\n            m:0,\r\n            s:0,\r\n            etat:\"false\"\r\n          }\r\n        }\r\n      timer= ()=>{\r\n      setTimeout(()=>{\r\n        if(this.state.etat===\"true\" ){\r\n        if(this.state.s===60){\r\n          this.setState({\r\n            s:0,\r\n            m:this.state.m+1\r\n          })\r\n        }else{\r\n          this.setState({\r\n            s:this.state.s+1\r\n          })\r\n        }\r\n       if(this.state.m===60){\r\n        this.setState({\r\n          m:0,\r\n          h:this.state.h+1\r\n        })\r\n       } \r\n      this.timer() }\r\n      },1000)\r\n      }\r\n      \r\n       reset =()=>{\r\n      this.setState(\r\n      {\r\n        \r\n        h: 0,\r\n        m:0,\r\n        s:0,\r\n        etat:\"false\" \r\n      })\r\n      }\r\n     \r\n      etat=()=>{\r\n        if(this.state.etat===\"true\"){\r\n          this.setState({\r\n            etat:\"false\"\r\n          })\r\n        }else{\r\n          \r\n          this.setState({\r\n            etat:\"true\"\r\n          })\r\n          this.timer()\r\n         \r\n        }\r\n       \r\n      }\r\n        render() {\r\n          return (\r\n            <div className='gosdiv'>\r\n            <div className='divT'>\r\n            <div className='div2'>\r\n            <div className='lesdiv'>\r\n             <div className=\"ss\">\r\n             <span>{this.state.h<10?\"0\"+this.state.h:this.state.h}</span>:\r\n             <span>{this.state.m<10?\"0\"+this.state.m:this.state.m}</span>:\r\n             <span>{this.state.s<10?\"0\"+this.state.s:this.state.s}</span>\r\n            </div>\r\n            <div className=\"div2-1\">\r\n                <div id='div21'> <sapn id=\"span1\"><strong>Hour</strong> </sapn></div>\r\n                <div id='div22'><span id=\"span2\"><strong>Minute</strong> </span></div>\r\n                <div id='div23'><span id=\"span3\"><strong>Second</strong> </span></div>\r\n             </div>\r\n            <div className=\"lesbtn\">\r\n               <button className=\"btn1\" onClick={this.etat}>{this.state.etat===\"true\"?\"Stop\":\"Start\"}</button>\r\n               <button className=\"btn2\" onClick={this.reset}>Reset</button>\r\n               </div>\r\n              </div>\r\n              </div>\r\n              </div>\r\n              </div>\r\n          );\r\n        }\r\n      }\r\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './component/timer.js';\nimport './App.css';\nclass App extends Component {\n  render() { \n    return ( \n        <Timer/>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}